#!/bin/bash

### for all simulations in a directory, get the average timing of the first division for the last x seasons (in file irstdivision_endseason_allsims.dat) 
### and the violin plots of all three divisions for each simulation
echo -n "">firstdivision_endseason_allsims.dat; 
season=250000; 
nrseasons=5; 
for fi in data_sim*; do timepoint=$(tail -1 $fi | awk '{print $1;}'); finalseason=$(bc <<< "$timepoint-($timepoint%$season)"); startseason=$(bc <<< "$finalseason-$season*$nrseasons"); fimod=${fi#data_*}; python3 ~/origins_postdoc/multicell/regulation_evolution/scripts/plot_division_time_gatherseasons.py lastdivtimes_${fimod%.*}.pdf $season $startseason $finalseason $fi >> firstdivision_endseason_allsims.dat; done


##note: for phenotype analysis on all dirs in a simdir, use script allsimdir_networkanalysis.sh

#check whether network has been done on any of these simulations
for di in movie_sim*;do echo ${di}; ls ${di}/networks/sta*; done

#in networks dir
#analyse each single network, make the blue/red plot and extract parameters
ser=$(ls  | tail -10 |head -1)
timepoint=${ser%_*}
count=0; for net in ${timepoint}_c*.txt; do echo $net; if [ "$count" -gt "0" ]; then bash ~/origins_postdoc/multicell/regulation_evolution/scripts/network_analysis_new.sh ${net}; fi; ((count++)); done

#0 or 1 depending on whether you want to plot individual matrix plot
python3 ~/origins_postdoc/multicell/regulation_evolution/scripts//plot_netanalysis_jan.py <OUTNAME> <0/1> states_*.dat > consensusdata.txt


#gather all blue-red plots
all_ims=(); for im in div_*pdf; do all_ims+=( "$im" ); ((count++)); done
#or, if you want just a subset (because it's a burnin and the last pop is too big)
count=0; count2=0; all_ims=(); for im in div_*pdf; do if (( $(echo "$(( ( RANDOM % 10 )  + 1 ))<3" | bc -l) )); then all_ims+=( "$im" ); ((count2++)); fi; ((count++)); done; echo $count $count2

montage -geometry +4+4 -background '#000000' -tile 50x ${all_ims[@]} allmatrixplots.pdf


#find genetic distance between original network and final population (summstats contains av and stdev)
bash ~/origins_postdoc/multicell/regulation_evolution/scripts/network_distance.sh orifile timepoint > summstats.dat
#for all simulations in a simdir:
for dir in movie_sim*; do cd ${dir}/networks/; bash ~/origins_postdoc/multicell/regulation_evolution/scripts/network_distance.sh ../../<ORINAME> >>../../gendist_sumstats.dat; cd -; done

###sweeping data together for scatterplot
#assess phenotype of original network:
bash ~/origins_postdoc/multicell/regulation_evolution/scripts/network_analysis_new.sh <orinet.txt>
python3 ~/origins_postdoc/multicell/regulation_evolution/scripts/plot_netanalysis_jan.py orinet 1 states_<orinet>.dat >consensusdata_ori.dat
#make sure you have the consensus data from all movie_sim dirs
ls -l co*; 
for dir in movie_sim*; do echo $dir; cd ${dir}/networks/ ;ls co*; cd -; done
#remove trailing whitespace


###################
### old version ###
###################

#in networks dir
#analyse each single network, make the blue/red plot and extract parameters
count=0; for net in t01*.txt; do echo $net; if [ "$count" -gt "0" ]; then bash ~/origins_postdoc/multicell/regulation_evolution/scripts/network_analysis.sh ${net}; fi; ((count++)); done

#gather all blue-red plots
all_ims=(); for im in div_*pdf; do all_ims+=( "$im" ); ((count++)); done
#or, if you want just a subset (because it's a burnin and the last pop is too big)
count=0; count2=0; all_ims=(); for im in div_*pdf; do if (( $(echo "$(( ( RANDOM % 10 )  + 1 ))<3" | bc -l) )); then all_ims+=( "$im" ); ((count2++)); fi; ((count++)); done; echo $count $count2

montage -geometry +4+4 -background '#000000' -tile 50x ${all_ims[@]} tempimage.pdf

#make scatter plot of parameters
echo -n "">allpars.txt; for fi in *_pars.txt; do cat $fi >> allpars.txt; done

#go to main dir
python ~/origins_postdoc/multicell/regulation_evolution/scripts/plot_networkpars.py sim1_2_netpars.pdf movie_sim1_2/networks/allpars.txt burnbasic_nov_vlomut2_sim4_t0067000000c1460_pars.txt


#####
# find representative network in burnin:

#make plot and find median
read medgrad medslope < <( (python ~/origins_postdoc/multicell/regulation_evolution/scripts/plot_networkpars2_new.py sim_2_netpars.pdf allpars.txt ) )

#find network closest to that point
storfi=""; mindist=999999.; for fi in *_pars.txt; do read grad slope < <( ( cat $fi ) ) ;  dist=$( bc -l <<< "($grad - $medgrad)*($grad - $medgrad)+($slope - $medslope)*($slope - $medslope)" ); echo $dist; if (( $(echo "$dist < $mindist" |bc -l) )); then mindist=$dist; storfi=$fi; fi;  done; echo $storfi
